import aktual.budget.model.AccountId;
import aktual.budget.model.RuleId;
import aktual.budget.model.ScheduleId;
import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS schedules(
  id TEXT AS ScheduleId PRIMARY KEY,
  rule TEXT AS RuleId,
  active INTEGER AS Boolean DEFAULT 0,
  completed INTEGER AS Boolean DEFAULT 0,
  posts_transaction INTEGER AS Boolean DEFAULT 0,
  tombstone INTEGER AS Boolean DEFAULT 0,
  name TEXT DEFAULT NULL
);

CREATE VIEW IF NOT EXISTS v_schedules AS
SELECT
  s.id,
  s.name,
  s.rule,
CASE
  WHEN snd.local_next_date_ts = snd.base_next_date_ts THEN snd.local_next_date
  ELSE snd.base_next_date
END AS
  next_date,
  s.completed,
  s.posts_transaction,
  s.tombstone,
  pm.targetId AS _payee,
  json_extract(r.conditions, sjp.account || '.value') AS _account,
  json_extract(r.conditions, sjp.amount || '.value') AS _amount,
  json_extract(r.conditions, sjp.amount || '.op') AS _amountOp,
  json_extract(r.conditions, sjp.date || '.value') AS _date,
  r.conditions AS _conditions,
  r.actions AS _actions
FROM schedules s
LEFT JOIN schedules_next_date snd ON snd.schedule_id = s.id
LEFT JOIN schedules_json_paths sjp ON sjp.schedule_id = s.id
LEFT JOIN rules r ON r.id = s.rule
LEFT JOIN payee_mapping pm ON pm.id = json_extract(r.conditions, sjp.payee || '.value');

insert:
  INSERT OR REPLACE
    INTO schedules(id, rule, active, completed, posts_transaction, tombstone, name)
    VALUES(?,?,?,?,?,?,?);

setRule:
  UPDATE schedules
    SET rule = ?
    WHERE id = ?;

getIdByName:
  SELECT id
    FROM schedules
    WHERE tombstone = 0 AND name = ?;

delete:
  DELETE
    FROM schedules
    WHERE id = ?;

getById:
  SELECT id
    FROM schedules
    WHERE rule = ?;

getFromVSchedules:
  SELECT * FROM v_schedules;
