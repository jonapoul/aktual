import aktual.budget.model.AccountId;
import aktual.budget.model.Amount;
import aktual.budget.model.CategoryId;
import aktual.budget.model.PayeeId;
import aktual.budget.model.ScheduleId;
import aktual.budget.model.TransactionId;
import kotlin.Boolean;
import kotlinx.datetime.LocalDate;
import kotlinx.serialization.json.JsonObject;

CREATE TABLE IF NOT EXISTS transactions(
  id TEXT AS TransactionId PRIMARY KEY,
  isParent INTEGER AS Boolean DEFAULT 0,
  isChild INTEGER AS Boolean DEFAULT 0,
  acct TEXT AS AccountId,
  category TEXT AS CategoryId,
  amount INTEGER AS Amount,
  description TEXT AS PayeeId,
  notes TEXT,
  date INTEGER AS LocalDate,
  financial_id TEXT,
  type TEXT,
  location TEXT,
  error TEXT AS JsonObject,
  imported_description TEXT AS PayeeId,
  starting_balance_flag INTEGER AS Boolean DEFAULT 0,
  transferred_id TEXT AS TransactionId,
  sort_order REAL,
  tombstone INTEGER AS Boolean DEFAULT 0,
  cleared INTEGER AS Boolean DEFAULT 1,
  pending INTEGER AS Boolean DEFAULT 0,
  parent_id TEXT AS TransactionId,
  schedule TEXT AS ScheduleId,
  reconciled INTEGER AS Boolean DEFAULT 0,
  raw_synced_data TEXT
);

CREATE INDEX IF NOT EXISTS trans_category_date ON transactions(category, date);
CREATE INDEX IF NOT EXISTS trans_category ON transactions(category);
CREATE INDEX IF NOT EXISTS trans_date ON transactions(date);
CREATE INDEX IF NOT EXISTS trans_parent_id ON transactions(parent_id);
CREATE INDEX IF NOT EXISTS trans_sorted ON transactions(date DESC, starting_balance_flag, sort_order DESC, id);

CREATE VIEW IF NOT EXISTS v_transactions_internal AS
SELECT
  t.id,
  t.isParent AS is_parent,
  t.isChild AS is_child,
  CASE WHEN t.isChild = 0 THEN NULL ELSE t.parent_id END AS parent_id,
  t.acct AS account,
  CASE WHEN t.isParent = 1 THEN NULL ELSE cm.transferId END AS category,
  IFNULL(t.amount, 0) AS amount,
  pm.targetId AS payee,
  t.notes,
  t.date,
  t.financial_id AS imported_id,
  t.error,
  t.imported_description AS imported_payee,
  t.starting_balance_flag,
  t.transferred_id AS transfer_id,
  t.sort_order,
  t.cleared,
  t.reconciled,
  t.tombstone,
  t.schedule
FROM transactions t
LEFT JOIN category_mapping cm ON cm.id = t.category
LEFT JOIN payee_mapping pm ON pm.id = t.description
WHERE
  t.date IS NOT NULL AND
  t.acct IS NOT NULL AND
  (t.isChild = 0 OR t.parent_id IS NOT NULL);

CREATE VIEW IF NOT EXISTS v_transactions_internal_alive AS
SELECT
  vti.*
FROM v_transactions_internal vti
LEFT JOIN transactions t2 ON (vti.is_child = 1 AND t2.id = vti.parent_id)
WHERE IFNULL(vti.tombstone, 0) = 0 AND (vti.is_child = 0 OR t2.tombstone = 0);

CREATE VIEW IF NOT EXISTS v_transactions AS
SELECT
  vtia.id,
  vtia.is_parent,
  vtia.is_child,
  vtia.parent_id,
  a.id AS account,
  c.id AS category,
  vtia.amount,
  p.id AS payee,
  vtia.notes,
  vtia.date,
  vtia.imported_id,
  vtia.error,
  vtia.imported_payee,
  vtia.starting_balance_flag,
  vtia.transfer_id,
  vtia.sort_order,
  vtia.cleared,
  vtia.reconciled,
  vtia.tombstone,
  vtia.schedule
FROM v_transactions_internal_alive vtia
LEFT JOIN payees p ON (p.id = vtia.payee AND p.tombstone = 0)
LEFT JOIN categories c ON (c.id = vtia.category AND c.tombstone = 0)
LEFT JOIN accounts a ON (a.id = vtia.account AND a.tombstone = 0)
ORDER BY
  vtia.date DESC,
  vtia.starting_balance_flag,
  vtia.sort_order DESC,
  vtia.id;

insert:
INSERT INTO transactions VALUES ?;

earliestDate:
SELECT *
  FROM v_transactions t
  LEFT JOIN accounts a
  ON t.account = a.id
  WHERE a.offbudget = 0 AND t.is_child = 0
  ORDER BY date ASC
  LIMIT 1;

earliestPrimaryDate:
SELECT *
  FROM v_transactions t
  LEFT JOIN accounts a
  ON t.account = a.id
  WHERE a.id = ? AND a.offbudget = 0 AND t.is_child = 0
  ORDER BY date ASC
  LIMIT 1;

-- packages/loot-core/src/server/accounts/app.ts closeAccount()
getIdsByAccount:
SELECT id, date FROM v_transactions WHERE account = ? ORDER BY sort_order;

getIds:
SELECT id, date FROM v_transactions ORDER BY sort_order;

getById:
SELECT
  vt.id,
  vt.date,
  a.name AS accountName,
  p.name AS payeeName,
  vt.notes,
  c.name AS categoryName,
  vt.amount
  FROM v_transactions AS vt
  JOIN categories AS c ON vt.category = c.id
  JOIN accounts AS a ON vt.account = a.id
  JOIN payees AS p ON vt.payee = p.id
  WHERE vt.id = ?;
